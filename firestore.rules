rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function hasRole(role) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    function belongsToOrg(orgId) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organizationId == orgId;
    }
    
    function isOrgAdmin(orgId) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/organizations/$(orgId)) &&
             get(/databases/$(database)/documents/organizations/$(orgId)).data.adminId == request.auth.uid;
    }

    // Users collection
    match /users/{userId} {
      // Users can read and write their own document
      allow read, write: if isOwner(userId);
      // Admins can read all users in their organization
      allow read: if isAuthenticated() && hasRole('admin');
      // Allow listing users for admin dashboard
      allow list: if isAuthenticated() && hasRole('admin');
      // Admins can create user documents for their organization
      allow create: if isAuthenticated() && hasRole('admin');
      // Admins can update user documents in their organization
      allow update: if isAuthenticated() && hasRole('admin');
    }

    // Organizations collection
    match /organizations/{orgId} {
      // Organization admin can read and write their organization
      allow read, write: if isOrgAdmin(orgId);
      // Organization members can read their organization
      allow read: if belongsToOrg(orgId);
      // Authenticated users can create organizations (for admin setup)
      allow create: if isAuthenticated() && hasRole('admin');
    }

    // Campaigns collection
    match /campaigns/{campaignId} {
      // Admins can read, write, delete all campaigns in their org
      allow read, write, delete: if isAuthenticated() && hasRole('admin');
      // Allow listing campaigns for admin dashboard  
      allow list: if isAuthenticated() && hasRole('admin');
      // Organization members can read campaigns in their org
      allow read: if isAuthenticated();
      // Admins can create campaigns
      allow create: if isAuthenticated() && hasRole('admin');
      // Allow campaign updates for status changes
      allow update: if isAuthenticated() && hasRole('admin');
    }

    // Achievements collection
    match /achievements/{achievementId} {
      // Users can create achievements for themselves
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      // Users can read their own achievements
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      // Admins can read and verify achievements in their organization campaigns
      allow read, update: if hasRole('admin') && 
                             exists(/databases/$(database)/documents/campaigns/$(resource.data.campaignId)) &&
                             belongsToOrg(get(/databases/$(database)/documents/campaigns/$(resource.data.campaignId)).data.orgId);
      // Organization members can read achievements in their org campaigns
      allow read: if isAuthenticated() && 
                     exists(/databases/$(database)/documents/campaigns/$(resource.data.campaignId)) &&
                     belongsToOrg(get(/databases/$(database)/documents/campaigns/$(resource.data.campaignId)).data.orgId);
    }

    // Analytics collection (if we store analytics data)
    match /analytics/{document} {
      // Only admins can access analytics
      allow read, write: if hasRole('admin');
    }
  }
}